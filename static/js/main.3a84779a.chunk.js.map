{"version":3,"sources":["Components/Section.js","Components/Redux/contacts/contacts-actions.js","Components/Form/Form.js","Components/Filter/Filter.js","Components/ContactList/ContactList.js","App.js","Components/Redux/contacts/contacts-reducer.js","Components/Redux/store.js","index.js"],"names":["Section","title","children","defaultProps","addContact","createAction","prepare","payload","id","shortid","generate","name","number","deleteContact","filter","connect","dispatch","addContacts","x","actions","useState","setName","setNomber","inputChange","e","currentTarget","value","className","onSubmit","preventDefault","type","pattern","required","onChange","state","contacts","target","items","toLowerCase","includes","onDeleteContact","map","contact","onClick","App","initialState","JSON","parse","localStorage","getItem","itemsReducer","createReducer","length","setItem","stringify","alert","filterReducer","combineReducers","middleware","getDefaultMiddleware","logger","store","configureStore","reducer","contactsReducer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3a84779a.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Section = ({ title, children }) => (\r\n    <div>\r\n        {title && <h2>{title}</h2>}\r\n        {children}\r\n    </div>\r\n);\r\n\r\nSection.defaultProps = {\r\n    title: \"\",\r\n    children: [],\r\n};\r\n\r\nSection.propTypes = {\r\n    title: PropTypes.string,\r\n    children: PropTypes.node,\r\n};\r\n\r\nexport default Section;","import shortid from 'shortid';\r\nimport { createAction } from '@reduxjs/toolkit';\r\nexport const addContact = createAction('ADD_CONTACT', prepare => {\r\n    return {\r\n        payload: {\r\n            id: `id-${shortid.generate()}`,\r\n            name: prepare.name,\r\n            number: prepare.number\r\n        },\r\n    };\r\n});\r\nexport const deleteContact = createAction('DELETE_CONTACT');\r\nexport const filter = createAction('FILTER');","import  { useState } from 'react';\r\nimport './Form.css';\r\nimport { connect } from 'react-redux';\r\nimport * as actions from '../Redux/contacts/contacts-actions';\r\n\r\n\r\nfunction Form({ addContacts }) {\r\n  const [name, setName] = useState('');\r\n  const [number, setNomber] = useState('');\r\n  const inputChange = e => {\r\n    const { name, value } = e.currentTarget;\r\n    switch (name) {\r\n      case 'name': setName(value); break;\r\n      case 'number': setNomber(value); break;\r\n      default: return;\r\n    }\r\n  };\r\n  const formSabmit = e => {\r\n    e.preventDefault();\r\n    addContacts({ name, number });\r\n    setNomber('');\r\n    setName('');\r\n  }\r\n  return (\r\n            <form  className=\"form\"onSubmit={formSabmit}>\r\n             <label >\r\n               Имя\r\n               <input\r\n                type=\"text\"\r\n                name=\"name\"\r\n                pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n                title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n                required\r\n                value={name}\r\n                onChange={inputChange}\r\n               />\r\n                </label>\r\n             <label >\r\n               Номер телефона\r\n               <input\r\n                type=\"tel\"\r\n                name=\"number\"\r\n                pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n                title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n                required\r\n                value={number}\r\n                onChange={inputChange}\r\n               />\r\n             </label>\r\n             <button title=\"submit\">Добавить контакт</button>\r\n            </form>\r\n        );\r\n};\r\nconst mapDispatchToProps = dispatch => {\r\n\r\n   return {\r\n     addContacts: (x) => dispatch(actions.addContact(x))\r\n   };\r\n};\r\n\r\nexport default connect(null,mapDispatchToProps)(Form);","import \"./Filter.css\";\r\nimport { connect } from 'react-redux';\r\nimport * as actions from '../Redux/contacts/contacts-actions';\r\nfunction Filter({ filter, inputChange }) {\r\n    return (\r\n        <label className=\"Filter\">\r\n        Поиск контакта по имени\r\n        <input\r\n        type=\"text\"\r\n        name=\"filter\"\r\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n        required\r\n        value={filter}\r\n        onChange={inputChange}\r\n        />\r\n        </label>\r\n    );\r\n};\r\nconst mapStateToProps = state => {\r\n   return {filter: state.contacts.filter}\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n\r\n   return {\r\n     inputChange: (x) => dispatch(actions.filter(x.target.value)),\r\n   };\r\n};    \r\nexport default connect(mapStateToProps,mapDispatchToProps)(Filter);\r\n","import './ContactList.css';\r\nimport { connect } from 'react-redux';\r\nimport * as actions from '../Redux/contacts/contacts-actions';\r\n\r\n\r\nfunction ContactList({ contacts, onDeleteContact }) {\r\n   return (\r\n   <ul className=\"ContactList\">\r\n      {contacts.map(contact =>\r\n         <li key={contact.id} >\r\n            <p>{contact.name}: {contact.number}</p>\r\n            <button onClick={()=>onDeleteContact(contact.id)}>Удалить</button>\r\n         </li>\r\n      )}\r\n   </ul> \r\n);\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n   const name = state.contacts.filter;\r\n   const contacts = state.contacts.items.filter(e => e.name.toLowerCase().includes(name.toLowerCase())) ;\r\n   return {contacts};\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n\r\n   return {\r\n     onDeleteContact: (id) => dispatch(actions.deleteContact(id)),\r\n   };\r\n};\r\nexport default connect(mapStateToProps,mapDispatchToProps)(ContactList);","import './App.css';\nimport Section from './Components/Section';\nimport Form from './Components/Form';\nimport Filter from './Components/Filter';\nimport ContactList from './Components/ContactList';\n\nexport default function App() {\n\n  return (\n      <div className=\"App\">\n        <Section title=\"Телефонная книга\">\n          <Form/>\n        </Section>\n        <Section title=\"Контакты\">\n          <Filter />\n        <ContactList/>\n        </Section>\n      </div>\n    );\n};\n","import { combineReducers } from 'redux';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\nimport * as actions from './contacts-actions';\r\n\r\nconst initialState = JSON.parse(localStorage.getItem('contacts'))\r\n    ?? []\r\n    ;\r\nconst itemsReducer = createReducer(initialState, {\r\n    [actions.addContact]: (state, { payload }) => {\r\n        if (state.filter(e => e.name === payload.name).length === 0) {\r\n          localStorage.setItem(\"contacts\", JSON.stringify([...state, payload]));\r\n          return [...state, payload];\r\n        }\r\n        alert(`${payload.name} уже существует в контактах!`);\r\n        return state;\r\n    },\r\n    [actions.deleteContact]: (state, {payload})=> {\r\n        const contacts = state.filter(contact => contact.id !== payload);\r\n        localStorage.setItem(\"contacts\", JSON.stringify(contacts));\r\n        return contacts;\r\n    }\r\n    \r\n});\r\n\r\nconst filterReducer = createReducer('', {\r\n    [actions.filter]: (state, { payload }) => payload,\r\n});\r\n\r\nexport default combineReducers({\r\n    items: itemsReducer,\r\n    filter: filterReducer,\r\n});\r\n","\r\nimport contactsReducer from './contacts/contacts-reducer';\r\nimport { configureStore, getDefaultMiddleware} from '@reduxjs/toolkit';\r\nimport logger from 'redux-logger';\r\n\r\nconst middleware = [...getDefaultMiddleware(), logger];\r\nconst store = configureStore({\r\n  reducer: {\r\n    contacts: contactsReducer,\r\n  },\r\n  middleware,\r\n});\r\n\r\nexport default store;\r\n\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport store from './Components/Redux/store';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App /> \n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}